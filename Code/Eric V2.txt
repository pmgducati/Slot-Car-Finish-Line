void Sort() {
  // clear all positions
  P1_Lane = 0;
  P2_Lane = 0;
  P3_Lane = 0;
  P4_Lane = 0;

  int place_to_assign = 1;

  //stop when we have assigned all 4 lanes
  while (place_to_assign < 5) {

    //find the maximum lap count of lanes we have not yet done
    int max_lap = 0;
    if (P1_Lane == 0)
      max_lap = max(max_lap, L1_Lap_Count);
    if (P2_Lane == 0)
      max_lap = max(max_lap, L2_Lap_Count);
    if (P3_Lane == 0)
      max_lap = max(max_lap, L3_Lap_Count);
    if (P4_Lane == 0)
      max_lap = max(max_lap, L4_Lap_Count);

    // find the miniumim lap time of all lanes on the max lap
    unsigned long min_time = (unsigned long)-1;  //Max unsigned long (biggest number)
    if (P1_Lane == 0 && L1_Lap_Count == max_lap)
      min_time = min(min_time, L1_Last_Lap_Time);
    if (P2_Lane == 0 && L2_Lap_Count == max_lap)
      min_time = min(min_time, L2_Last_Lap_Time);
    if (P3_Lane == 0 && L3_Lap_Count == max_lap)
      min_time = min(min_time, L3_Last_Lap_Time);
    if (P4_Lane == 0 && L4_Lap_Count == max_lap)
      min_time = min(min_time, L4_Last_Lap_Time);

    // find the first lane that matches the max lap and min time
    if (P1_Lane == 0 && L1_Lap_Count == max_lap && L1_Last_Lap_Time == min_time)
      P1_Lane = place_to_assign++;
    if (P2_Lane == 0 && L2_Lap_Count == max_lap && L2_Last_Lap_Time == min_time)
      P2_Lane = place_to_assign++;
    if (P3_Lane == 0 && L3_Lap_Count == max_lap && L3_Last_Lap_Time == min_time)
      P3_Lane = place_to_assign++;
    if (P4_Lane == 0 && L4_Lap_Count == max_lap && L4_Last_Lap_Time == min_time)
      P4_Lane = place_to_assign++;
  }

  Display_Leaderboard();
}